"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classPrivateMethodInitSpec(t,e){_checkPrivateRedeclaration(t,e),e.add(t)}function _classPrivateFieldInitSpec(t,e,o){_checkPrivateRedeclaration(t,e),e.set(t,o)}function _checkPrivateRedeclaration(t,e){if(e.has(t))throw new TypeError("Cannot initialize the same private elements twice on an object")}function _classPrivateFieldGet(t,e){return _classApplyDescriptorGet(t,_classExtractFieldDescriptor(t,e,"get"))}function _classApplyDescriptorGet(t,e){return e.get?e.get.call(t):e.value}function _classPrivateFieldSet(t,e,o){return _classApplyDescriptorSet(t,_classExtractFieldDescriptor(t,e,"set"),o),o}function _classExtractFieldDescriptor(t,e,o){if(e.has(t))return e.get(t);throw new TypeError("attempted to "+o+" private field on non-instance")}function _classApplyDescriptorSet(t,e,o){if(e.set)e.set.call(t,o);else{if(!e.writable)throw new TypeError("attempted to set read only private field");e.value=o}}function _classPrivateMethodGet(t,e,o){if(e.has(t))return o;throw new TypeError("attempted to get private field on non-instance")}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function _createSuper(o){var n=_isNativeReflectConstruct();return function(){var t,e=_getPrototypeOf(o);return _possibleConstructorReturn(this,n?(t=_getPrototypeOf(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments))}}function _possibleConstructorReturn(t,e){if(e&&("object"===_typeof(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(t)}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return!1}}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var o=0;o<e.length;o++){var n=e[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,_toPropertyKey(n.key),n)}}function _createClass(t,e,o){return e&&_defineProperties(t.prototype,e),o&&_defineProperties(t,o),Object.defineProperty(t,"prototype",{writable:!1}),t}function _defineProperty(t,e,o){return(e=_toPropertyKey(e))in t?Object.defineProperty(t,e,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[e]=o,t}function _toPropertyKey(t){t=_toPrimitive(t,"string");return"symbol"===_typeof(t)?t:String(t)}function _toPrimitive(t,e){if("object"!==_typeof(t)||null===t)return t;var o=t[Symbol.toPrimitive];if(void 0===o)return("string"===e?String:Number)(t);o=o.call(t,e||"default");if("object"!==_typeof(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}var form=document.querySelector(".form"),containerWorkouts=document.querySelector(".workouts"),inputType=document.querySelector(".form__input--type"),inputDistance=document.querySelector(".form__input--distance"),inputDuration=document.querySelector(".form__input--duration"),inputCadence=document.querySelector(".form__input--cadence"),inputElevation=document.querySelector(".form__input--elevation"),Workout=function(){function n(t,e,o){_classCallCheck(this,n),_defineProperty(this,"date",new Date),_defineProperty(this,"id",(Date.now()+"").slice(-10)),this.coords=t,this.distance=e,this.duration=o}return _createClass(n,[{key:"setDescription",value:function(t){this.description="".concat(this.type[0].toUpperCase()).concat(this.type.slice(1)," on ").concat(["January","February","March","April","May","June","July","August","September","October","November","December"][this.date.getMonth()]," ").concat(this.date.getDate())}}]),n}(),Running=function(){_inherits(r,Workout);var i=_createSuper(r);function r(t,e,o,n){return _classCallCheck(this,r),_defineProperty(_assertThisInitialized(t=i.call(this,t,e,o)),"type","running"),t.cadence=n,t.calcPace(),t.setDescription(),t}return _createClass(r,[{key:"calcPace",value:function(){return this.pace=this.duration/this.distance,this.pace}}]),r}(),Cycling=function(){_inherits(r,Workout);var i=_createSuper(r);function r(t,e,o,n){return _classCallCheck(this,r),_defineProperty(_assertThisInitialized(t=i.call(this,t,e,o)),"type","cycling"),t.elevationGain=n,t.calcSpeed(),t.setDescription(),t}return _createClass(r,[{key:"calcSpeed",value:function(){var t=this.distance/(this.duration/60);return this.speed=t.toFixed(2),this.speed}}]),r}(),_map=new WeakMap,_mapEvent=new WeakMap,_workouts=new WeakMap,_getPosition=new WeakSet,_loadMap=new WeakSet,_showForm=new WeakSet,_hideForm=new WeakSet,_toggleElevationField=new WeakSet,_newWorkout=new WeakSet,_moveTo=new WeakSet,_setLocalStorage=new WeakSet,_getLocalStorage=new WeakSet,App=function(){function t(){_classCallCheck(this,t),_classPrivateMethodInitSpec(this,_getLocalStorage),_classPrivateMethodInitSpec(this,_setLocalStorage),_classPrivateMethodInitSpec(this,_moveTo),_classPrivateMethodInitSpec(this,_newWorkout),_classPrivateMethodInitSpec(this,_toggleElevationField),_classPrivateMethodInitSpec(this,_hideForm),_classPrivateMethodInitSpec(this,_showForm),_classPrivateMethodInitSpec(this,_loadMap),_classPrivateMethodInitSpec(this,_getPosition),_classPrivateFieldInitSpec(this,_map,{writable:!0,value:void 0}),_classPrivateFieldInitSpec(this,_mapEvent,{writable:!0,value:void 0}),_classPrivateFieldInitSpec(this,_workouts,{writable:!0,value:[]}),_classPrivateMethodGet(this,_getPosition,_getPosition2).call(this),form.addEventListener("submit",_classPrivateMethodGet(this,_newWorkout,_newWorkout2).bind(this)),inputType.addEventListener("change",_classPrivateMethodGet(this,_toggleElevationField,_toggleElevationField2)),containerWorkouts.addEventListener("click",_classPrivateMethodGet(this,_moveTo,_moveTo2).bind(this)),_classPrivateMethodGet(this,_getLocalStorage,_getLocalStorage2).call(this)}return _createClass(t,[{key:"renderWorkoutMarker",value:function(t){L.marker(t.coords).addTo(_classPrivateFieldGet(this,_map)).bindPopup(L.popup({maxWidth:250,minWidth:100,autoClose:!1,closeOnClick:!1,className:"".concat(t.type,"-popup")})).setPopupContent("".concat("running"===t.type?"üèÉ‚Äç‚ôÇÔ∏è":"üö¥‚Äç‚ôÄÔ∏è"," ").concat(t.description)).openPopup()}},{key:"renderWorkout",value:function(t){var e='\n    <li class="workout workout--'.concat(t.type,'" data-id="').concat(t.id,'">\n    <h2 class="workout__title">').concat(t.description,'</h2>\n    <div class="workout__details">\n      <span class="workout__icon">').concat("running"===t.type?"üèÉ‚Äç‚ôÇÔ∏è":"üö¥‚Äç‚ôÄÔ∏è",'</span>\n      <span class="workout__value">').concat(t.distance,'</span>\n      <span class="workout__unit">km</span>\n    </div>\n    <div class="workout__details">\n      <span class="workout__icon">‚è±</span>\n      <span class="workout__value">').concat(t.duration,'</span>\n      <span class="workout__unit">min</span>\n    </div>');"running"===t.type&&(e+='\n      <div class="workout__details">\n      <span class="workout__icon">‚ö°Ô∏è</span>\n      <span class="workout__value">'.concat(t.pace.toFixed(1),'</span>\n      <span class="workout__unit">min/km</span>\n    </div>\n    <div class="workout__details">\n      <span class="workout__icon">ü¶∂üèº</span>\n      <span class="workout__value">').concat(t.cadence,'</span>\n      <span class="workout__unit">spm</span>\n    </div>\n  </li>')),"cycling"===t.type&&(e+='\n       <div class="workout__details">\n      <span class="workout__icon">‚ö°Ô∏è</span>\n      <span class="workout__value">'.concat(t.speed,'</span>\n      <span class="workout__unit">km/h</span>\n    </div>\n    <div class="workout__details">\n      <span class="workout__icon">‚õ∞</span>\n      <span class="workout__value">').concat(t.elevationGain,'</span>\n      <span class="workout__unit">m</span>\n    </div>\n  </li>')),form.insertAdjacentHTML("afterend",e)}}]),t}();function _getPosition2(){navigator.geolocation.getCurrentPosition(_classPrivateMethodGet(this,_loadMap,_loadMap2).bind(this),function(){console.log("nie moge pobrac wspolrzednych")})}function _loadMap2(t){var e=this,t=[t.coords.latitude,t.coords.longitude];_classPrivateFieldSet(this,_map,L.map("map").setView(t,13)),L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png",{attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'}).addTo(_classPrivateFieldGet(this,_map)),_classPrivateFieldGet(this,_map).on("click",_classPrivateMethodGet(this,_showForm,_showForm2).bind(this)),_classPrivateFieldGet(this,_workouts).forEach(function(t){e.renderWorkoutMarker(t)})}function _showForm2(t){_classPrivateFieldSet(this,_mapEvent,t),form.classList.remove("hidden"),inputDistance.focus()}function _hideForm2(){inputCadence.value=inputDistance.value=inputDuration.value=inputElevation.value="",form.style.display="none",form.classList.add("hidden"),setTimeout(function(){form.style.display="grid"},1e3)}function _toggleElevationField2(){inputElevation.closest(".form__row").classList.toggle("form__row--hidden"),inputCadence.closest(".form__row").classList.toggle("form__row--hidden")}function _newWorkout2(t){t.preventDefault();function e(){for(var t=arguments.length,e=new Array(t),o=0;o<t;o++)e[o]=arguments[o];return e.every(function(t){return Number.isFinite(t)})}function o(){for(var t=arguments.length,e=new Array(t),o=0;o<t;o++)e[o]=arguments[o];return e.every(function(t){return 0<t})}var t=inputType.value,n=+inputDistance.value,i=+inputDuration.value,r=_classPrivateFieldGet(this,_mapEvent).latlng,a=r.lat,r=r.lng;if("running"===t){var s=+inputCadence.value;if(!e(n,i,s)||!o(n,i,s))return alert("Inputs have to be positive numbers!");s=new Running([a,r],n,i,s)}if("cycling"===t){t=+inputElevation.value;if(!e(n,i,t)||!o(n,i,t))return alert("Inputs have to be positive numbers!");s=new Cycling([a,r],n,i,t)}_classPrivateFieldGet(this,_workouts).push(s),this.renderWorkoutMarker(s),this.renderWorkout(s),_classPrivateMethodGet(this,_hideForm,_hideForm2).call(this),_classPrivateMethodGet(this,_setLocalStorage,_setLocalStorage2).call(this)}function _moveTo2(t){var e=t.target.closest(".workout");e&&(t=_classPrivateFieldGet(this,_workouts).find(function(t){return t.id===e.dataset.id}),_classPrivateFieldGet(this,_map).setView(t.coords,13))}function _setLocalStorage2(){localStorage.setItem("workouts",JSON.stringify(_classPrivateFieldGet(this,_workouts)))}function _getLocalStorage2(){var e=this,t=JSON.parse(localStorage.getItem("workouts"));t&&(_classPrivateFieldSet(this,_workouts,t),_classPrivateFieldGet(this,_workouts).forEach(function(t){e.renderWorkout(t)}))}var app=new App;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
